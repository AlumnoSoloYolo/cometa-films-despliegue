# Etapa de construcción
FROM node:18-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
# Aumentar el límite de memoria para Node.js
ENV NODE_OPTIONS="--max-old-space-size=4096"
# Modificar el archivo environment.ts antes de la compilación para usar rutas relativas
RUN find /app/src -type f -name "*.ts" -exec sed -i 's|http://localhost:3000|/api|g' {} \; || true
# Construir para producción
RUN npm run build

# Etapa de producción
FROM nginx:alpine
# Copiar los archivos compilados al directorio html
COPY --from=build /app/dist/ /usr/share/nginx/html/
# Asegurarnos de que cualquier URL de backend que quede se cambie a /api
RUN find /usr/share/nginx/html -type f -name "*.js" -exec sed -i 's|http://localhost:3000|/api|g' {} \; || true
RUN find /usr/share/nginx/html -type f -name "*.js" -exec sed -i 's|"http://backend:3000|"/api|g' {} \; || true
RUN find /usr/share/nginx/html -type f -name "*.js" -exec sed -i "s|'http://backend:3000|'/api|g" {} \; || true
# Configurar Nginx para servir desde el directorio browser y con proxy inverso al backend
RUN echo 'server { \
    listen 80; \
    root /usr/share/nginx/html/browser; \
    index index.html; \
    \
    # Configuración para la aplicación Angular \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # Proxy inverso para el backend \
    location /api/ { \
        proxy_pass http://backend:3000/; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_cache_bypass $http_upgrade; \
        proxy_redirect off; \
    } \
}' > /etc/nginx/conf.d/default.conf
# Eliminar cualquier index.html predeterminado que pueda interferir
RUN rm -f /usr/share/nginx/html/index.html || true
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
